/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.Vitrivr.CineastApi.Client.OpenAPIDateConverter;

namespace Org.Vitrivr.CineastApi.Model
{
    /// <summary>
    /// DistinctElementsResult
    /// </summary>
    [DataContract]
    public partial class DistinctElementsResult :  IEquatable<DistinctElementsResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DistinctElementsResult" /> class.
        /// </summary>
        /// <param name="queryId">queryId.</param>
        /// <param name="distinctElements">distinctElements.</param>
        public DistinctElementsResult(string queryId = default(string), List<string> distinctElements = default(List<string>))
        {
            this.QueryId = queryId;
            this.DistinctElements = distinctElements;
        }
        
        /// <summary>
        /// Gets or Sets QueryId
        /// </summary>
        [DataMember(Name="queryId", EmitDefaultValue=false)]
        public string QueryId { get; set; }

        /// <summary>
        /// Gets or Sets DistinctElements
        /// </summary>
        [DataMember(Name="distinctElements", EmitDefaultValue=false)]
        public List<string> DistinctElements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DistinctElementsResult {\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  DistinctElements: ").Append(DistinctElements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DistinctElementsResult);
        }

        /// <summary>
        /// Returns true if DistinctElementsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DistinctElementsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DistinctElementsResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryId == input.QueryId ||
                    (this.QueryId != null &&
                    this.QueryId.Equals(input.QueryId))
                ) && 
                (
                    this.DistinctElements == input.DistinctElements ||
                    this.DistinctElements != null &&
                    input.DistinctElements != null &&
                    this.DistinctElements.SequenceEqual(input.DistinctElements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryId != null)
                    hashCode = hashCode * 59 + this.QueryId.GetHashCode();
                if (this.DistinctElements != null)
                    hashCode = hashCode * 59 + this.DistinctElements.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
