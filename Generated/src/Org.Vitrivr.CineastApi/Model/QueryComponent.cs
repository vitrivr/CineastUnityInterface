/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.Vitrivr.CineastApi.Client.OpenAPIDateConverter;

namespace Org.Vitrivr.CineastApi.Model
{
    /// <summary>
    /// QueryComponent
    /// </summary>
    [DataContract]
    public partial class QueryComponent :  IEquatable<QueryComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryComponent" /> class.
        /// </summary>
        /// <param name="terms">terms.</param>
        /// <param name="containerId">containerId.</param>
        public QueryComponent(List<QueryTerm> terms = default(List<QueryTerm>), int containerId = default(int))
        {
            this.Terms = terms;
            this.ContainerId = containerId;
        }
        
        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public List<QueryTerm> Terms { get; set; }

        /// <summary>
        /// Gets or Sets ContainerId
        /// </summary>
        [DataMember(Name="containerId", EmitDefaultValue=false)]
        public int ContainerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryComponent {\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryComponent);
        }

        /// <summary>
        /// Returns true if QueryComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Terms == input.Terms ||
                    this.Terms != null &&
                    input.Terms != null &&
                    this.Terms.SequenceEqual(input.Terms)
                ) && 
                (
                    this.ContainerId == input.ContainerId ||
                    (this.ContainerId != null &&
                    this.ContainerId.Equals(input.ContainerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.ContainerId != null)
                    hashCode = hashCode * 59 + this.ContainerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
