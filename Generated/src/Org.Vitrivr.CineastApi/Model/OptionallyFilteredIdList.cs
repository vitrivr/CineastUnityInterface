/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.Vitrivr.CineastApi.Client.OpenAPIDateConverter;

namespace Org.Vitrivr.CineastApi.Model
{
    /// <summary>
    /// OptionallyFilteredIdList
    /// </summary>
    [DataContract]
    public partial class OptionallyFilteredIdList :  IEquatable<OptionallyFilteredIdList>, IValidatableObject
    {
        /// <summary>
        /// Defines MessageType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum PING for value: PING
            /// </summary>
            [EnumMember(Value = "PING")]
            PING = 1,

            /// <summary>
            /// Enum QSIM for value: Q_SIM
            /// </summary>
            [EnumMember(Value = "Q_SIM")]
            QSIM = 2,

            /// <summary>
            /// Enum QMLT for value: Q_MLT
            /// </summary>
            [EnumMember(Value = "Q_MLT")]
            QMLT = 3,

            /// <summary>
            /// Enum QNESEG for value: Q_NESEG
            /// </summary>
            [EnumMember(Value = "Q_NESEG")]
            QNESEG = 4,

            /// <summary>
            /// Enum QSEG for value: Q_SEG
            /// </summary>
            [EnumMember(Value = "Q_SEG")]
            QSEG = 5,

            /// <summary>
            /// Enum MLOOKUP for value: M_LOOKUP
            /// </summary>
            [EnumMember(Value = "M_LOOKUP")]
            MLOOKUP = 6,

            /// <summary>
            /// Enum QTEMPORAL for value: Q_TEMPORAL
            /// </summary>
            [EnumMember(Value = "Q_TEMPORAL")]
            QTEMPORAL = 7,

            /// <summary>
            /// Enum SESSIONSTART for value: SESSION_START
            /// </summary>
            [EnumMember(Value = "SESSION_START")]
            SESSIONSTART = 8,

            /// <summary>
            /// Enum QRSTART for value: QR_START
            /// </summary>
            [EnumMember(Value = "QR_START")]
            QRSTART = 9,

            /// <summary>
            /// Enum QREND for value: QR_END
            /// </summary>
            [EnumMember(Value = "QR_END")]
            QREND = 10,

            /// <summary>
            /// Enum QRERROR for value: QR_ERROR
            /// </summary>
            [EnumMember(Value = "QR_ERROR")]
            QRERROR = 11,

            /// <summary>
            /// Enum QROBJECT for value: QR_OBJECT
            /// </summary>
            [EnumMember(Value = "QR_OBJECT")]
            QROBJECT = 12,

            /// <summary>
            /// Enum QRMETADATAO for value: QR_METADATA_O
            /// </summary>
            [EnumMember(Value = "QR_METADATA_O")]
            QRMETADATAO = 13,

            /// <summary>
            /// Enum QRMETADATAS for value: QR_METADATA_S
            /// </summary>
            [EnumMember(Value = "QR_METADATA_S")]
            QRMETADATAS = 14,

            /// <summary>
            /// Enum QRSEGMENT for value: QR_SEGMENT
            /// </summary>
            [EnumMember(Value = "QR_SEGMENT")]
            QRSEGMENT = 15,

            /// <summary>
            /// Enum QRSIMILARITY for value: QR_SIMILARITY
            /// </summary>
            [EnumMember(Value = "QR_SIMILARITY")]
            QRSIMILARITY = 16

        }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public MessageTypeEnum? MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptionallyFilteredIdList" /> class.
        /// </summary>
        /// <param name="filters">filters.</param>
        /// <param name="ids">ids.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="idList">idList.</param>
        public OptionallyFilteredIdList(List<AbstractMetadataFilterDescriptor> filters = default(List<AbstractMetadataFilterDescriptor>), List<string> ids = default(List<string>), MessageTypeEnum? messageType = default(MessageTypeEnum?), List<string> idList = default(List<string>))
        {
            this.Filters = filters;
            this.Ids = ids;
            this.MessageType = messageType;
            this.IdList = idList;
        }
        
        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<AbstractMetadataFilterDescriptor> Filters { get; set; }

        /// <summary>
        /// Gets or Sets Ids
        /// </summary>
        [DataMember(Name="ids", EmitDefaultValue=false)]
        public List<string> Ids { get; set; }


        /// <summary>
        /// Gets or Sets IdList
        /// </summary>
        [DataMember(Name="idList", EmitDefaultValue=false)]
        public List<string> IdList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptionallyFilteredIdList {\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  IdList: ").Append(IdList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptionallyFilteredIdList);
        }

        /// <summary>
        /// Returns true if OptionallyFilteredIdList instances are equal
        /// </summary>
        /// <param name="input">Instance of OptionallyFilteredIdList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptionallyFilteredIdList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.IdList == input.IdList ||
                    this.IdList != null &&
                    input.IdList != null &&
                    this.IdList.SequenceEqual(input.IdList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filters != null)
                    hashCode = hashCode * 59 + this.Filters.GetHashCode();
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.IdList != null)
                    hashCode = hashCode * 59 + this.IdList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
