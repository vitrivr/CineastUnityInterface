/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.Vitrivr.CineastApi.Client.OpenAPIDateConverter;

namespace Org.Vitrivr.CineastApi.Model
{
    /// <summary>
    /// MediaObjectDescriptor
    /// </summary>
    [DataContract]
    public partial class MediaObjectDescriptor :  IEquatable<MediaObjectDescriptor>, IValidatableObject
    {
        /// <summary>
        /// Defines Mediatype
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediatypeEnum
        {
            /// <summary>
            /// Enum VIDEO for value: VIDEO
            /// </summary>
            [EnumMember(Value = "VIDEO")]
            VIDEO = 1,

            /// <summary>
            /// Enum IMAGE for value: IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGE = 2,

            /// <summary>
            /// Enum AUDIO for value: AUDIO
            /// </summary>
            [EnumMember(Value = "AUDIO")]
            AUDIO = 3,

            /// <summary>
            /// Enum MODEL3D for value: MODEL3D
            /// </summary>
            [EnumMember(Value = "MODEL3D")]
            MODEL3D = 4,

            /// <summary>
            /// Enum IMAGESEQUENCE for value: IMAGE_SEQUENCE
            /// </summary>
            [EnumMember(Value = "IMAGE_SEQUENCE")]
            IMAGESEQUENCE = 5,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 6

        }

        /// <summary>
        /// Gets or Sets Mediatype
        /// </summary>
        [DataMember(Name="mediatype", EmitDefaultValue=false)]
        public MediatypeEnum? Mediatype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaObjectDescriptor" /> class.
        /// </summary>
        /// <param name="objectId">objectId.</param>
        /// <param name="name">name.</param>
        /// <param name="path">path.</param>
        /// <param name="mediatype">mediatype.</param>
        /// <param name="exists">exists.</param>
        /// <param name="contentURL">contentURL.</param>
        public MediaObjectDescriptor(string objectId = default(string), string name = default(string), string path = default(string), MediatypeEnum? mediatype = default(MediatypeEnum?), bool exists = default(bool), string contentURL = default(string))
        {
            this.ObjectId = objectId;
            this.Name = name;
            this.Path = path;
            this.Mediatype = mediatype;
            this.Exists = exists;
            this.ContentURL = contentURL;
        }
        
        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }


        /// <summary>
        /// Gets or Sets Exists
        /// </summary>
        [DataMember(Name="exists", EmitDefaultValue=false)]
        public bool Exists { get; set; }

        /// <summary>
        /// Gets or Sets ContentURL
        /// </summary>
        [DataMember(Name="contentURL", EmitDefaultValue=false)]
        public string ContentURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaObjectDescriptor {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Mediatype: ").Append(Mediatype).Append("\n");
            sb.Append("  Exists: ").Append(Exists).Append("\n");
            sb.Append("  ContentURL: ").Append(ContentURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaObjectDescriptor);
        }

        /// <summary>
        /// Returns true if MediaObjectDescriptor instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaObjectDescriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaObjectDescriptor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Mediatype == input.Mediatype ||
                    (this.Mediatype != null &&
                    this.Mediatype.Equals(input.Mediatype))
                ) && 
                (
                    this.Exists == input.Exists ||
                    (this.Exists != null &&
                    this.Exists.Equals(input.Exists))
                ) && 
                (
                    this.ContentURL == input.ContentURL ||
                    (this.ContentURL != null &&
                    this.ContentURL.Equals(input.ContentURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Mediatype != null)
                    hashCode = hashCode * 59 + this.Mediatype.GetHashCode();
                if (this.Exists != null)
                    hashCode = hashCode * 59 + this.Exists.GetHashCode();
                if (this.ContentURL != null)
                    hashCode = hashCode * 59 + this.ContentURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
