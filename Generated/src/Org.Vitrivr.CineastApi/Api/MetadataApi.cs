/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.Vitrivr.CineastApi.Client;
using Org.Vitrivr.CineastApi.Model;

namespace Org.Vitrivr.CineastApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find metadata for the given object id
        /// </summary>
        /// <remarks>
        /// Find metadata by the given object id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetaById (string id);

        /// <summary>
        /// Find metadata for the given object id
        /// </summary>
        /// <remarks>
        /// Find metadata by the given object id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetaByIdWithHttpInfo (string id);
        /// <summary>
        /// Find metadata for specific object id in given domain with given key
        /// </summary>
        /// <remarks>
        /// The description
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetaFullyQualified (string id, string domain, string key);

        /// <summary>
        /// Find metadata for specific object id in given domain with given key
        /// </summary>
        /// <remarks>
        /// The description
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetaFullyQualifiedWithHttpInfo (string id, string domain, string key);
        /// <summary>
        /// Find metadata for specific object id in given domain
        /// </summary>
        /// <remarks>
        /// Find metadata for specific object id in given domain
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetadataByDomain (string domain, string id);

        /// <summary>
        /// Find metadata for specific object id in given domain
        /// </summary>
        /// <remarks>
        /// Find metadata for specific object id in given domain
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByDomainWithHttpInfo (string domain, string id);
        /// <summary>
        /// Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <remarks>
        /// Find metadata in the specified domain for all the given ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetadataByDomainBatched (string domain, IdList idList = default(IdList));

        /// <summary>
        /// Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <remarks>
        /// Find metadata in the specified domain for all the given ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByDomainBatchedWithHttpInfo (string domain, IdList idList = default(IdList));
        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata for a given object id with specified key
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetadataByKey (string key, string id);

        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata for a given object id with specified key
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByKeyWithHttpInfo (string key, string id);
        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetadataByKeyBatched (string key, IdList idList = default(IdList));

        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByKeyBatchedWithHttpInfo (string key, IdList idList = default(IdList));
        /// <summary>
        /// Finds metadata for the given list of object ids
        /// </summary>
        /// <remarks>
        /// Finds metadata for the given list of object ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        MediaObjectMetadataQueryResult FindMetadataForObjectIdBatched (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList));

        /// <summary>
        /// Finds metadata for the given list of object ids
        /// </summary>
        /// <remarks>
        /// Finds metadata for the given list of object ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        ApiResponse<MediaObjectMetadataQueryResult> FindMetadataForObjectIdBatchedWithHttpInfo (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find metadata for the given object id
        /// </summary>
        /// <remarks>
        /// Find metadata by the given object id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetaByIdAsync (string id);

        /// <summary>
        /// Find metadata for the given object id
        /// </summary>
        /// <remarks>
        /// Find metadata by the given object id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetaByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Find metadata for specific object id in given domain with given key
        /// </summary>
        /// <remarks>
        /// The description
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetaFullyQualifiedAsync (string id, string domain, string key);

        /// <summary>
        /// Find metadata for specific object id in given domain with given key
        /// </summary>
        /// <remarks>
        /// The description
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetaFullyQualifiedAsyncWithHttpInfo (string id, string domain, string key);
        /// <summary>
        /// Find metadata for specific object id in given domain
        /// </summary>
        /// <remarks>
        /// Find metadata for specific object id in given domain
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByDomainAsync (string domain, string id);

        /// <summary>
        /// Find metadata for specific object id in given domain
        /// </summary>
        /// <remarks>
        /// Find metadata for specific object id in given domain
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByDomainAsyncWithHttpInfo (string domain, string id);
        /// <summary>
        /// Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <remarks>
        /// Find metadata in the specified domain for all the given ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByDomainBatchedAsync (string domain, IdList idList = default(IdList));

        /// <summary>
        /// Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <remarks>
        /// Find metadata in the specified domain for all the given ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByDomainBatchedAsyncWithHttpInfo (string domain, IdList idList = default(IdList));
        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata for a given object id with specified key
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByKeyAsync (string key, string id);

        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata for a given object id with specified key
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByKeyAsyncWithHttpInfo (string key, string id);
        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByKeyBatchedAsync (string key, IdList idList = default(IdList));

        /// <summary>
        /// Find metadata for a given object id with specified key
        /// </summary>
        /// <remarks>
        /// Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByKeyBatchedAsyncWithHttpInfo (string key, IdList idList = default(IdList));
        /// <summary>
        /// Finds metadata for the given list of object ids
        /// </summary>
        /// <remarks>
        /// Finds metadata for the given list of object ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataForObjectIdBatchedAsync (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList));

        /// <summary>
        /// Finds metadata for the given list of object ids
        /// </summary>
        /// <remarks>
        /// Finds metadata for the given list of object ids
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataForObjectIdBatchedAsyncWithHttpInfo (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataApi : IMetadataApi
    {
        private Org.Vitrivr.CineastApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataApi(String basePath)
        {
            this.Configuration = new Org.Vitrivr.CineastApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.Vitrivr.CineastApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// </summary>
        /// <returns></returns>
        public MetadataApi()
        {
            this.Configuration = Org.Vitrivr.CineastApi.Client.Configuration.Default;

            ExceptionFactory = Org.Vitrivr.CineastApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataApi(Org.Vitrivr.CineastApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.Vitrivr.CineastApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.Vitrivr.CineastApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.Vitrivr.CineastApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.Vitrivr.CineastApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find metadata for the given object id Find metadata by the given object id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetaById (string id)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetaByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find metadata for the given object id Find metadata by the given object id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetaByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetaById");

            var localVarPath = "/api/v1/find/metadata/by/id/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetaById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for the given object id Find metadata by the given object id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetaByIdAsync (string id)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetaByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find metadata for the given object id Find metadata by the given object id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id to find metadata of</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetaByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetaById");

            var localVarPath = "/api/v1/find/metadata/by/id/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetaById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for specific object id in given domain with given key The description
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetaFullyQualified (string id, string domain, string key)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetaFullyQualifiedWithHttpInfo(id, domain, key);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find metadata for specific object id in given domain with given key The description
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetaFullyQualifiedWithHttpInfo (string id, string domain, string key)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetaFullyQualified");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling MetadataApi->FindMetaFullyQualified");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetadataApi->FindMetaFullyQualified");

            var localVarPath = "/api/v1/find/metadata/of/{id}/in/{domain}/with/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetaFullyQualified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for specific object id in given domain with given key The description
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetaFullyQualifiedAsync (string id, string domain, string key)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetaFullyQualifiedAsyncWithHttpInfo(id, domain, key);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find metadata for specific object id in given domain with given key The description
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The object id</param>
        /// <param name="domain">The domain name</param>
        /// <param name="key">Metadata key</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetaFullyQualifiedAsyncWithHttpInfo (string id, string domain, string key)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetaFullyQualified");
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling MetadataApi->FindMetaFullyQualified");
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetadataApi->FindMetaFullyQualified");

            var localVarPath = "/api/v1/find/metadata/of/{id}/in/{domain}/with/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetaFullyQualified", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for specific object id in given domain Find metadata for specific object id in given domain
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetadataByDomain (string domain, string id)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetadataByDomainWithHttpInfo(domain, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find metadata for specific object id in given domain Find metadata for specific object id in given domain
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByDomainWithHttpInfo (string domain, string id)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling MetadataApi->FindMetadataByDomain");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetadataByDomain");

            var localVarPath = "/api/v1/find/metadata/in/{domain}/by/id/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for specific object id in given domain Find metadata for specific object id in given domain
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByDomainAsync (string domain, string id)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetadataByDomainAsyncWithHttpInfo(domain, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find metadata for specific object id in given domain Find metadata for specific object id in given domain
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="id">The object id of the multimedia object to find metadata for</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByDomainAsyncWithHttpInfo (string domain, string id)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling MetadataApi->FindMetadataByDomain");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetadataByDomain");

            var localVarPath = "/api/v1/find/metadata/in/{domain}/by/id/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata in the specified domain for all the given ids Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetadataByDomainBatched (string domain, IdList idList = default(IdList))
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetadataByDomainBatchedWithHttpInfo(domain, idList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find metadata in the specified domain for all the given ids Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByDomainBatchedWithHttpInfo (string domain, IdList idList = default(IdList))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling MetadataApi->FindMetadataByDomainBatched");

            var localVarPath = "/api/v1/find/metadata/in/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByDomainBatched", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata in the specified domain for all the given ids Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByDomainBatchedAsync (string domain, IdList idList = default(IdList))
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetadataByDomainBatchedAsyncWithHttpInfo(domain, idList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find metadata in the specified domain for all the given ids Find metadata in the specified domain for all the given ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByDomainBatchedAsyncWithHttpInfo (string domain, IdList idList = default(IdList))
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling MetadataApi->FindMetadataByDomainBatched");

            var localVarPath = "/api/v1/find/metadata/in/{domain}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByDomainBatched", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata for a given object id with specified key
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetadataByKey (string key, string id)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetadataByKeyWithHttpInfo(key, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata for a given object id with specified key
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByKeyWithHttpInfo (string key, string id)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetadataApi->FindMetadataByKey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetadataByKey");

            var localVarPath = "/api/v1/find/metadata/with/{key}/by/id/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata for a given object id with specified key
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByKeyAsync (string key, string id)
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetadataByKeyAsyncWithHttpInfo(key, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata for a given object id with specified key
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="id">The object id of for which the metadata should be find</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByKeyAsyncWithHttpInfo (string key, string id)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetadataApi->FindMetadataByKey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MetadataApi->FindMetadataByKey");

            var localVarPath = "/api/v1/find/metadata/with/{key}/by/id/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetadataByKeyBatched (string key, IdList idList = default(IdList))
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetadataByKeyBatchedWithHttpInfo(key, idList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetadataByKeyBatchedWithHttpInfo (string key, IdList idList = default(IdList))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetadataApi->FindMetadataByKeyBatched");

            var localVarPath = "/api/v1/find/metadata/with/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByKeyBatched", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataByKeyBatchedAsync (string key, IdList idList = default(IdList))
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetadataByKeyBatchedAsyncWithHttpInfo(key, idList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find metadata for a given object id with specified key Find metadata with a the speicifed key from the path across all domains and for the provided ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the metadata to find</param>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataByKeyBatchedAsyncWithHttpInfo (string key, IdList idList = default(IdList))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling MetadataApi->FindMetadataByKeyBatched");

            var localVarPath = "/api/v1/find/metadata/with/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataByKeyBatched", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Finds metadata for the given list of object ids Finds metadata for the given list of object ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>MediaObjectMetadataQueryResult</returns>
        public MediaObjectMetadataQueryResult FindMetadataForObjectIdBatched (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList))
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = FindMetadataForObjectIdBatchedWithHttpInfo(optionallyFilteredIdList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds metadata for the given list of object ids Finds metadata for the given list of object ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>ApiResponse of MediaObjectMetadataQueryResult</returns>
        public ApiResponse<MediaObjectMetadataQueryResult> FindMetadataForObjectIdBatchedWithHttpInfo (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList))
        {

            var localVarPath = "/api/v1/find/metadata/by/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optionallyFilteredIdList != null && optionallyFilteredIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(optionallyFilteredIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = optionallyFilteredIdList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataForObjectIdBatched", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

        /// <summary>
        /// Finds metadata for the given list of object ids Finds metadata for the given list of object ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>Task of MediaObjectMetadataQueryResult</returns>
        public async System.Threading.Tasks.Task<MediaObjectMetadataQueryResult> FindMetadataForObjectIdBatchedAsync (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList))
        {
             ApiResponse<MediaObjectMetadataQueryResult> localVarResponse = await FindMetadataForObjectIdBatchedAsyncWithHttpInfo(optionallyFilteredIdList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds metadata for the given list of object ids Finds metadata for the given list of object ids
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optionallyFilteredIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaObjectMetadataQueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaObjectMetadataQueryResult>> FindMetadataForObjectIdBatchedAsyncWithHttpInfo (OptionallyFilteredIdList optionallyFilteredIdList = default(OptionallyFilteredIdList))
        {

            var localVarPath = "/api/v1/find/metadata/by/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (optionallyFilteredIdList != null && optionallyFilteredIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(optionallyFilteredIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = optionallyFilteredIdList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindMetadataForObjectIdBatched", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaObjectMetadataQueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MediaObjectMetadataQueryResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaObjectMetadataQueryResult)));
        }

    }
}
