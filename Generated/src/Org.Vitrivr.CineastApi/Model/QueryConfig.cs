/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.Vitrivr.CineastApi.Client.OpenAPIDateConverter;

namespace Org.Vitrivr.CineastApi.Model
{
    /// <summary>
    /// QueryConfig
    /// </summary>
    [DataContract]
    public partial class QueryConfig :  IEquatable<QueryConfig>, IValidatableObject
    {
        /// <summary>
        /// Defines Hints
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HintsEnum
        {
            /// <summary>
            /// Enum Exact for value: exact
            /// </summary>
            [EnumMember(Value = "exact")]
            Exact = 1,

            /// <summary>
            /// Enum Inexact for value: inexact
            /// </summary>
            [EnumMember(Value = "inexact")]
            Inexact = 2,

            /// <summary>
            /// Enum Lsh for value: lsh
            /// </summary>
            [EnumMember(Value = "lsh")]
            Lsh = 3,

            /// <summary>
            /// Enum Ecp for value: ecp
            /// </summary>
            [EnumMember(Value = "ecp")]
            Ecp = 4,

            /// <summary>
            /// Enum Mi for value: mi
            /// </summary>
            [EnumMember(Value = "mi")]
            Mi = 5,

            /// <summary>
            /// Enum Pq for value: pq
            /// </summary>
            [EnumMember(Value = "pq")]
            Pq = 6,

            /// <summary>
            /// Enum Sh for value: sh
            /// </summary>
            [EnumMember(Value = "sh")]
            Sh = 7,

            /// <summary>
            /// Enum Va for value: va
            /// </summary>
            [EnumMember(Value = "va")]
            Va = 8,

            /// <summary>
            /// Enum Vaf for value: vaf
            /// </summary>
            [EnumMember(Value = "vaf")]
            Vaf = 9,

            /// <summary>
            /// Enum Vav for value: vav
            /// </summary>
            [EnumMember(Value = "vav")]
            Vav = 10,

            /// <summary>
            /// Enum Sequential for value: sequential
            /// </summary>
            [EnumMember(Value = "sequential")]
            Sequential = 11,

            /// <summary>
            /// Enum Empirical for value: empirical
            /// </summary>
            [EnumMember(Value = "empirical")]
            Empirical = 12

        }


        /// <summary>
        /// Gets or Sets Hints
        /// </summary>
        [DataMember(Name="hints", EmitDefaultValue=false)]
        public List<HintsEnum> Hints { get; set; }
        /// <summary>
        /// Defines Distance
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DistanceEnum
        {
            /// <summary>
            /// Enum Chisquared for value: chisquared
            /// </summary>
            [EnumMember(Value = "chisquared")]
            Chisquared = 1,

            /// <summary>
            /// Enum Correlation for value: correlation
            /// </summary>
            [EnumMember(Value = "correlation")]
            Correlation = 2,

            /// <summary>
            /// Enum Cosine for value: cosine
            /// </summary>
            [EnumMember(Value = "cosine")]
            Cosine = 3,

            /// <summary>
            /// Enum Hamming for value: hamming
            /// </summary>
            [EnumMember(Value = "hamming")]
            Hamming = 4,

            /// <summary>
            /// Enum Jaccard for value: jaccard
            /// </summary>
            [EnumMember(Value = "jaccard")]
            Jaccard = 5,

            /// <summary>
            /// Enum Kullbackleibler for value: kullbackleibler
            /// </summary>
            [EnumMember(Value = "kullbackleibler")]
            Kullbackleibler = 6,

            /// <summary>
            /// Enum Chebyshev for value: chebyshev
            /// </summary>
            [EnumMember(Value = "chebyshev")]
            Chebyshev = 7,

            /// <summary>
            /// Enum Euclidean for value: euclidean
            /// </summary>
            [EnumMember(Value = "euclidean")]
            Euclidean = 8,

            /// <summary>
            /// Enum Squaredeuclidean for value: squaredeuclidean
            /// </summary>
            [EnumMember(Value = "squaredeuclidean")]
            Squaredeuclidean = 9,

            /// <summary>
            /// Enum Manhattan for value: manhattan
            /// </summary>
            [EnumMember(Value = "manhattan")]
            Manhattan = 10,

            /// <summary>
            /// Enum Minkowski for value: minkowski
            /// </summary>
            [EnumMember(Value = "minkowski")]
            Minkowski = 11,

            /// <summary>
            /// Enum Spannorm for value: spannorm
            /// </summary>
            [EnumMember(Value = "spannorm")]
            Spannorm = 12,

            /// <summary>
            /// Enum Haversine for value: haversine
            /// </summary>
            [EnumMember(Value = "haversine")]
            Haversine = 13

        }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public DistanceEnum? Distance { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryConfig" /> class.
        /// </summary>
        /// <param name="queryId">queryId.</param>
        /// <param name="hints">hints.</param>
        /// <param name="distance">distance.</param>
        /// <param name="distanceWeights">distanceWeights.</param>
        /// <param name="norm">norm.</param>
        /// <param name="resultsPerModule">resultsPerModule.</param>
        /// <param name="maxResults">maxResults.</param>
        /// <param name="relevantSegmentIds">relevantSegmentIds.</param>
        /// <param name="distanceIfEmpty">distanceIfEmpty.</param>
        /// <param name="correspondenceFunctionIfEmpty">correspondenceFunctionIfEmpty.</param>
        /// <param name="correspondenceFunction">correspondenceFunction.</param>
        /// <param name="distanceWeightsIfEmpty">distanceWeightsIfEmpty.</param>
        /// <param name="normIfEmpty">normIfEmpty.</param>
        /// <param name="rawResultsPerModule">rawResultsPerModule.</param>
        public QueryConfig(Guid queryId = default(Guid), List<HintsEnum> hints = default(List<HintsEnum>), DistanceEnum? distance = default(DistanceEnum?), List<float> distanceWeights = default(List<float>), float norm = default(float), int resultsPerModule = default(int), int maxResults = default(int), List<string> relevantSegmentIds = default(List<string>), QueryConfig distanceIfEmpty = default(QueryConfig), QueryConfig correspondenceFunctionIfEmpty = default(QueryConfig), Object correspondenceFunction = default(Object), QueryConfig distanceWeightsIfEmpty = default(QueryConfig), QueryConfig normIfEmpty = default(QueryConfig), int rawResultsPerModule = default(int))
        {
            this.QueryId = queryId;
            this.Hints = hints;
            this.Distance = distance;
            this.DistanceWeights = distanceWeights;
            this.Norm = norm;
            this.ResultsPerModule = resultsPerModule;
            this.MaxResults = maxResults;
            this.RelevantSegmentIds = relevantSegmentIds;
            this.DistanceIfEmpty = distanceIfEmpty;
            this.CorrespondenceFunctionIfEmpty = correspondenceFunctionIfEmpty;
            this.CorrespondenceFunction = correspondenceFunction;
            this.DistanceWeightsIfEmpty = distanceWeightsIfEmpty;
            this.NormIfEmpty = normIfEmpty;
            this.RawResultsPerModule = rawResultsPerModule;
        }
        
        /// <summary>
        /// Gets or Sets QueryId
        /// </summary>
        [DataMember(Name="queryId", EmitDefaultValue=false)]
        public Guid QueryId { get; set; }



        /// <summary>
        /// Gets or Sets DistanceWeights
        /// </summary>
        [DataMember(Name="distanceWeights", EmitDefaultValue=false)]
        public List<float> DistanceWeights { get; set; }

        /// <summary>
        /// Gets or Sets Norm
        /// </summary>
        [DataMember(Name="norm", EmitDefaultValue=false)]
        public float Norm { get; set; }

        /// <summary>
        /// Gets or Sets ResultsPerModule
        /// </summary>
        [DataMember(Name="resultsPerModule", EmitDefaultValue=false)]
        public int ResultsPerModule { get; set; }

        /// <summary>
        /// Gets or Sets MaxResults
        /// </summary>
        [DataMember(Name="maxResults", EmitDefaultValue=false)]
        public int MaxResults { get; set; }

        /// <summary>
        /// Gets or Sets RelevantSegmentIds
        /// </summary>
        [DataMember(Name="relevantSegmentIds", EmitDefaultValue=false)]
        public List<string> RelevantSegmentIds { get; set; }

        /// <summary>
        /// Gets or Sets DistanceIfEmpty
        /// </summary>
        [DataMember(Name="distanceIfEmpty", EmitDefaultValue=false)]
        public QueryConfig DistanceIfEmpty { get; set; }

        /// <summary>
        /// Gets or Sets CorrespondenceFunctionIfEmpty
        /// </summary>
        [DataMember(Name="correspondenceFunctionIfEmpty", EmitDefaultValue=false)]
        public QueryConfig CorrespondenceFunctionIfEmpty { get; set; }

        /// <summary>
        /// Gets or Sets CorrespondenceFunction
        /// </summary>
        [DataMember(Name="correspondenceFunction", EmitDefaultValue=false)]
        public Object CorrespondenceFunction { get; set; }

        /// <summary>
        /// Gets or Sets DistanceWeightsIfEmpty
        /// </summary>
        [DataMember(Name="distanceWeightsIfEmpty", EmitDefaultValue=false)]
        public QueryConfig DistanceWeightsIfEmpty { get; set; }

        /// <summary>
        /// Gets or Sets NormIfEmpty
        /// </summary>
        [DataMember(Name="normIfEmpty", EmitDefaultValue=false)]
        public QueryConfig NormIfEmpty { get; set; }

        /// <summary>
        /// Gets or Sets RawResultsPerModule
        /// </summary>
        [DataMember(Name="rawResultsPerModule", EmitDefaultValue=false)]
        public int RawResultsPerModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryConfig {\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  Hints: ").Append(Hints).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  DistanceWeights: ").Append(DistanceWeights).Append("\n");
            sb.Append("  Norm: ").Append(Norm).Append("\n");
            sb.Append("  ResultsPerModule: ").Append(ResultsPerModule).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  RelevantSegmentIds: ").Append(RelevantSegmentIds).Append("\n");
            sb.Append("  DistanceIfEmpty: ").Append(DistanceIfEmpty).Append("\n");
            sb.Append("  CorrespondenceFunctionIfEmpty: ").Append(CorrespondenceFunctionIfEmpty).Append("\n");
            sb.Append("  CorrespondenceFunction: ").Append(CorrespondenceFunction).Append("\n");
            sb.Append("  DistanceWeightsIfEmpty: ").Append(DistanceWeightsIfEmpty).Append("\n");
            sb.Append("  NormIfEmpty: ").Append(NormIfEmpty).Append("\n");
            sb.Append("  RawResultsPerModule: ").Append(RawResultsPerModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryConfig);
        }

        /// <summary>
        /// Returns true if QueryConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryId == input.QueryId ||
                    (this.QueryId != null &&
                    this.QueryId.Equals(input.QueryId))
                ) && 
                (
                    this.Hints == input.Hints ||
                    this.Hints != null &&
                    input.Hints != null &&
                    this.Hints.SequenceEqual(input.Hints)
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.DistanceWeights == input.DistanceWeights ||
                    this.DistanceWeights != null &&
                    input.DistanceWeights != null &&
                    this.DistanceWeights.SequenceEqual(input.DistanceWeights)
                ) && 
                (
                    this.Norm == input.Norm ||
                    (this.Norm != null &&
                    this.Norm.Equals(input.Norm))
                ) && 
                (
                    this.ResultsPerModule == input.ResultsPerModule ||
                    (this.ResultsPerModule != null &&
                    this.ResultsPerModule.Equals(input.ResultsPerModule))
                ) && 
                (
                    this.MaxResults == input.MaxResults ||
                    (this.MaxResults != null &&
                    this.MaxResults.Equals(input.MaxResults))
                ) && 
                (
                    this.RelevantSegmentIds == input.RelevantSegmentIds ||
                    this.RelevantSegmentIds != null &&
                    input.RelevantSegmentIds != null &&
                    this.RelevantSegmentIds.SequenceEqual(input.RelevantSegmentIds)
                ) && 
                (
                    this.DistanceIfEmpty == input.DistanceIfEmpty ||
                    (this.DistanceIfEmpty != null &&
                    this.DistanceIfEmpty.Equals(input.DistanceIfEmpty))
                ) && 
                (
                    this.CorrespondenceFunctionIfEmpty == input.CorrespondenceFunctionIfEmpty ||
                    (this.CorrespondenceFunctionIfEmpty != null &&
                    this.CorrespondenceFunctionIfEmpty.Equals(input.CorrespondenceFunctionIfEmpty))
                ) && 
                (
                    this.CorrespondenceFunction == input.CorrespondenceFunction ||
                    (this.CorrespondenceFunction != null &&
                    this.CorrespondenceFunction.Equals(input.CorrespondenceFunction))
                ) && 
                (
                    this.DistanceWeightsIfEmpty == input.DistanceWeightsIfEmpty ||
                    (this.DistanceWeightsIfEmpty != null &&
                    this.DistanceWeightsIfEmpty.Equals(input.DistanceWeightsIfEmpty))
                ) && 
                (
                    this.NormIfEmpty == input.NormIfEmpty ||
                    (this.NormIfEmpty != null &&
                    this.NormIfEmpty.Equals(input.NormIfEmpty))
                ) && 
                (
                    this.RawResultsPerModule == input.RawResultsPerModule ||
                    (this.RawResultsPerModule != null &&
                    this.RawResultsPerModule.Equals(input.RawResultsPerModule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryId != null)
                    hashCode = hashCode * 59 + this.QueryId.GetHashCode();
                if (this.Hints != null)
                    hashCode = hashCode * 59 + this.Hints.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.DistanceWeights != null)
                    hashCode = hashCode * 59 + this.DistanceWeights.GetHashCode();
                if (this.Norm != null)
                    hashCode = hashCode * 59 + this.Norm.GetHashCode();
                if (this.ResultsPerModule != null)
                    hashCode = hashCode * 59 + this.ResultsPerModule.GetHashCode();
                if (this.MaxResults != null)
                    hashCode = hashCode * 59 + this.MaxResults.GetHashCode();
                if (this.RelevantSegmentIds != null)
                    hashCode = hashCode * 59 + this.RelevantSegmentIds.GetHashCode();
                if (this.DistanceIfEmpty != null)
                    hashCode = hashCode * 59 + this.DistanceIfEmpty.GetHashCode();
                if (this.CorrespondenceFunctionIfEmpty != null)
                    hashCode = hashCode * 59 + this.CorrespondenceFunctionIfEmpty.GetHashCode();
                if (this.CorrespondenceFunction != null)
                    hashCode = hashCode * 59 + this.CorrespondenceFunction.GetHashCode();
                if (this.DistanceWeightsIfEmpty != null)
                    hashCode = hashCode * 59 + this.DistanceWeightsIfEmpty.GetHashCode();
                if (this.NormIfEmpty != null)
                    hashCode = hashCode * 59 + this.NormIfEmpty.GetHashCode();
                if (this.RawResultsPerModule != null)
                    hashCode = hashCode * 59 + this.RawResultsPerModule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
