/* 
 * Cineast RESTful API
 *
 * Cineast is vitrivr's content-based multimedia retrieval engine. This is it's RESTful API.
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@vitrivr.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.Vitrivr.CineastApi.Client;
using Org.Vitrivr.CineastApi.Model;

namespace Org.Vitrivr.CineastApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// End the active extraction session
        /// </summary>
        /// <remarks>
        /// CAUTION. Untested
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionState</returns>
        SessionState EndExtraction ();

        /// <summary>
        /// End the active extraction session
        /// </summary>
        /// <remarks>
        /// CAUTION. Untested
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionState</returns>
        ApiResponse<SessionState> EndExtractionWithHttpInfo ();
        /// <summary>
        /// End the session for given id
        /// </summary>
        /// <remarks>
        /// Ends the session for the given id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>SessionState</returns>
        SessionState EndSession (string id);

        /// <summary>
        /// End the session for given id
        /// </summary>
        /// <remarks>
        /// Ends the session for the given id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>ApiResponse of SessionState</returns>
        ApiResponse<SessionState> EndSessionWithHttpInfo (string id);
        /// <summary>
        /// Extract new item
        /// </summary>
        /// <remarks>
        /// TODO
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>SessionState</returns>
        SessionState ExtractItem (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage));

        /// <summary>
        /// Extract new item
        /// </summary>
        /// <remarks>
        /// TODO
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>ApiResponse of SessionState</returns>
        ApiResponse<SessionState> ExtractItemWithHttpInfo (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage));
        /// <summary>
        /// Start extraction session
        /// </summary>
        /// <remarks>
        /// Changes the session&#39;s state to extraction
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionState</returns>
        SessionState StartExtraction ();

        /// <summary>
        /// Start extraction session
        /// </summary>
        /// <remarks>
        /// Changes the session&#39;s state to extraction
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionState</returns>
        ApiResponse<SessionState> StartExtractionWithHttpInfo ();
        /// <summary>
        /// Start new session for given credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>SessionState</returns>
        SessionState StartSession (StartSessionMessage startSessionMessage = default(StartSessionMessage));

        /// <summary>
        /// Start new session for given credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>ApiResponse of SessionState</returns>
        ApiResponse<SessionState> StartSessionWithHttpInfo (StartSessionMessage startSessionMessage = default(StartSessionMessage));
        /// <summary>
        /// Validates the session with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>SessionState</returns>
        SessionState ValidateSession (string id);

        /// <summary>
        /// Validates the session with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>ApiResponse of SessionState</returns>
        ApiResponse<SessionState> ValidateSessionWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// End the active extraction session
        /// </summary>
        /// <remarks>
        /// CAUTION. Untested
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionState</returns>
        System.Threading.Tasks.Task<SessionState> EndExtractionAsync ();

        /// <summary>
        /// End the active extraction session
        /// </summary>
        /// <remarks>
        /// CAUTION. Untested
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionState>> EndExtractionAsyncWithHttpInfo ();
        /// <summary>
        /// End the session for given id
        /// </summary>
        /// <remarks>
        /// Ends the session for the given id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>Task of SessionState</returns>
        System.Threading.Tasks.Task<SessionState> EndSessionAsync (string id);

        /// <summary>
        /// End the session for given id
        /// </summary>
        /// <remarks>
        /// Ends the session for the given id
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionState>> EndSessionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Extract new item
        /// </summary>
        /// <remarks>
        /// TODO
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>Task of SessionState</returns>
        System.Threading.Tasks.Task<SessionState> ExtractItemAsync (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage));

        /// <summary>
        /// Extract new item
        /// </summary>
        /// <remarks>
        /// TODO
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionState>> ExtractItemAsyncWithHttpInfo (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage));
        /// <summary>
        /// Start extraction session
        /// </summary>
        /// <remarks>
        /// Changes the session&#39;s state to extraction
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionState</returns>
        System.Threading.Tasks.Task<SessionState> StartExtractionAsync ();

        /// <summary>
        /// Start extraction session
        /// </summary>
        /// <remarks>
        /// Changes the session&#39;s state to extraction
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionState>> StartExtractionAsyncWithHttpInfo ();
        /// <summary>
        /// Start new session for given credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>Task of SessionState</returns>
        System.Threading.Tasks.Task<SessionState> StartSessionAsync (StartSessionMessage startSessionMessage = default(StartSessionMessage));

        /// <summary>
        /// Start new session for given credentials
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionState>> StartSessionAsyncWithHttpInfo (StartSessionMessage startSessionMessage = default(StartSessionMessage));
        /// <summary>
        /// Validates the session with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>Task of SessionState</returns>
        System.Threading.Tasks.Task<SessionState> ValidateSessionAsync (string id);

        /// <summary>
        /// Validates the session with given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        System.Threading.Tasks.Task<ApiResponse<SessionState>> ValidateSessionAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionApi : ISessionApi
    {
        private Org.Vitrivr.CineastApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionApi(String basePath)
        {
            this.Configuration = new Org.Vitrivr.CineastApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.Vitrivr.CineastApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// </summary>
        /// <returns></returns>
        public SessionApi()
        {
            this.Configuration = Org.Vitrivr.CineastApi.Client.Configuration.Default;

            ExceptionFactory = Org.Vitrivr.CineastApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionApi(Org.Vitrivr.CineastApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.Vitrivr.CineastApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.Vitrivr.CineastApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.Vitrivr.CineastApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.Vitrivr.CineastApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// End the active extraction session CAUTION. Untested
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionState</returns>
        public SessionState EndExtraction ()
        {
             ApiResponse<SessionState> localVarResponse = EndExtractionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// End the active extraction session CAUTION. Untested
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionState</returns>
        public ApiResponse<SessionState> EndExtractionWithHttpInfo ()
        {

            var localVarPath = "/api/v1/session/extract/end";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EndExtraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// End the active extraction session CAUTION. Untested
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionState</returns>
        public async System.Threading.Tasks.Task<SessionState> EndExtractionAsync ()
        {
             ApiResponse<SessionState> localVarResponse = await EndExtractionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// End the active extraction session CAUTION. Untested
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionState>> EndExtractionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/session/extract/end";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EndExtraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// End the session for given id Ends the session for the given id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>SessionState</returns>
        public SessionState EndSession (string id)
        {
             ApiResponse<SessionState> localVarResponse = EndSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// End the session for given id Ends the session for the given id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>ApiResponse of SessionState</returns>
        public ApiResponse<SessionState> EndSessionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->EndSession");

            var localVarPath = "/api/v1/session/end/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EndSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// End the session for given id Ends the session for the given id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>Task of SessionState</returns>
        public async System.Threading.Tasks.Task<SessionState> EndSessionAsync (string id)
        {
             ApiResponse<SessionState> localVarResponse = await EndSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// End the session for given id Ends the session for the given id
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the session to end</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionState>> EndSessionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->EndSession");

            var localVarPath = "/api/v1/session/end/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EndSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Extract new item TODO
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>SessionState</returns>
        public SessionState ExtractItem (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage))
        {
             ApiResponse<SessionState> localVarResponse = ExtractItemWithHttpInfo(extractionContainerMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extract new item TODO
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>ApiResponse of SessionState</returns>
        public ApiResponse<SessionState> ExtractItemWithHttpInfo (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage))
        {

            var localVarPath = "/api/v1/session/extract/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extractionContainerMessage != null && extractionContainerMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extractionContainerMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extractionContainerMessage; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Extract new item TODO
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>Task of SessionState</returns>
        public async System.Threading.Tasks.Task<SessionState> ExtractItemAsync (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage))
        {
             ApiResponse<SessionState> localVarResponse = await ExtractItemAsyncWithHttpInfo(extractionContainerMessage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extract new item TODO
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extractionContainerMessage"> (optional)</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionState>> ExtractItemAsyncWithHttpInfo (ExtractionContainerMessage extractionContainerMessage = default(ExtractionContainerMessage))
        {

            var localVarPath = "/api/v1/session/extract/new";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (extractionContainerMessage != null && extractionContainerMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(extractionContainerMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = extractionContainerMessage; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Start extraction session Changes the session&#39;s state to extraction
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SessionState</returns>
        public SessionState StartExtraction ()
        {
             ApiResponse<SessionState> localVarResponse = StartExtractionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start extraction session Changes the session&#39;s state to extraction
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SessionState</returns>
        public ApiResponse<SessionState> StartExtractionWithHttpInfo ()
        {

            var localVarPath = "/api/v1/session/extract/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartExtraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Start extraction session Changes the session&#39;s state to extraction
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SessionState</returns>
        public async System.Threading.Tasks.Task<SessionState> StartExtractionAsync ()
        {
             ApiResponse<SessionState> localVarResponse = await StartExtractionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start extraction session Changes the session&#39;s state to extraction
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionState>> StartExtractionAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/session/extract/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartExtraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Start new session for given credentials 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>SessionState</returns>
        public SessionState StartSession (StartSessionMessage startSessionMessage = default(StartSessionMessage))
        {
             ApiResponse<SessionState> localVarResponse = StartSessionWithHttpInfo(startSessionMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start new session for given credentials 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>ApiResponse of SessionState</returns>
        public ApiResponse<SessionState> StartSessionWithHttpInfo (StartSessionMessage startSessionMessage = default(StartSessionMessage))
        {

            var localVarPath = "/api/v1/session/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startSessionMessage != null && startSessionMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startSessionMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startSessionMessage; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Start new session for given credentials 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>Task of SessionState</returns>
        public async System.Threading.Tasks.Task<SessionState> StartSessionAsync (StartSessionMessage startSessionMessage = default(StartSessionMessage))
        {
             ApiResponse<SessionState> localVarResponse = await StartSessionAsyncWithHttpInfo(startSessionMessage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start new session for given credentials 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startSessionMessage"> (optional)</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionState>> StartSessionAsyncWithHttpInfo (StartSessionMessage startSessionMessage = default(StartSessionMessage))
        {

            var localVarPath = "/api/v1/session/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startSessionMessage != null && startSessionMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startSessionMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startSessionMessage; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Validates the session with given id 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>SessionState</returns>
        public SessionState ValidateSession (string id)
        {
             ApiResponse<SessionState> localVarResponse = ValidateSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates the session with given id 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>ApiResponse of SessionState</returns>
        public ApiResponse<SessionState> ValidateSessionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->ValidateSession");

            var localVarPath = "/api/v1/session/validate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

        /// <summary>
        /// Validates the session with given id 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>Task of SessionState</returns>
        public async System.Threading.Tasks.Task<SessionState> ValidateSessionAsync (string id)
        {
             ApiResponse<SessionState> localVarResponse = await ValidateSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates the session with given id 
        /// </summary>
        /// <exception cref="Org.Vitrivr.CineastApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id to validate the session of</param>
        /// <returns>Task of ApiResponse (SessionState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SessionState>> ValidateSessionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SessionApi->ValidateSession");

            var localVarPath = "/api/v1/session/validate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SessionState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SessionState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SessionState)));
        }

    }
}
